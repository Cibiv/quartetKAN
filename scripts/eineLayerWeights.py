import numpy as np
import pandas as pd
import tensorflow.keras as keras
from keras import backend as K
import tensorflow as tf
import argparse
import logging
import os
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
from pylab import *

#modell laden:
model = keras.saving.load_model('../models/F-zoneNN_20250212_072800_003-0.667-0.668')
#anschauen was es für layer gibt: 
#model.summary()
#auf den i-ten layer des models mit models.layers[i] zugreifen
#hidden layer:
#print(model.layers[0])
#<keras.src.saving.legacy.saved_model.load.DenseKAN object at 0x7f4d8748d850>

#output layer:
#print(model.layers[1])
#<keras.src.layers.core.dense.Dense object at 0x7fdf76b06390>

#für dense layers erhält man die weights mit model.layers[i].weights
#print(model.layers[1].weights)
'''
[<tf.Variable 'dense/kernel:0' shape=(1, 1) dtype=float32, numpy=array([[11.785503]], dtype=float32)>,
<tf.Variable 'dense/bias:0' shape=(1,) dtype=float32, numpy=array([0.03887552], dtype=float32)>]
'''
#wie erhalte ich die weights und aktivierungsfunktionen von den hidden layers?
#print(model.layers[0].weights)

'''
[<tf.Variable 'dense_kan/spline_kernel:0' shape=(15, 8, 1) dtype=float32, numpy=
array([[[-2.69119740e-01],
        [-3.15880477e-02],
        [ 3.51329589e+00],
        [-2.01915503e-01],
        [ 3.15595269e-01],
        [-2.99904644e-01],
        [-6.60894275e-01],
        [ 5.34596741e-01]],

       [[-9.00304839e-02],
        [-1.23282306e-01],
        [ 2.83149272e-01],
        [-1.51399806e-01],
        [ 1.30541816e-01],
        [-1.01577997e+00],
        [-1.78577769e+00],
        [ 1.53889030e-01]],

       [[ 1.15249585e-02],
        [ 2.19129827e-02],
        [-5.69989920e-01],
        [-1.69695243e-01],
        [ 2.43422493e-01],
        [-1.20387995e+00],
        [-4.90044403e+00],
        [-3.73830348e-02]],

       [[ 2.03847494e-02],
        [ 3.89049910e-02],
        [ 3.43583965e+00],
        [ 1.47592142e-01],
        [-2.28836134e-01],
        [ 4.10949409e-01],
        [ 7.89664328e-01],
        [ 1.78610664e-02]],

       [[ 4.59830612e-02],
        [-1.57814667e-01],
        [-4.09372044e+00],
        [ 5.27456820e-01],
        [ 8.52056686e-03],
        [-1.13902855e+00],
        [ 2.42108574e+01],
        [-3.51735465e-02]],

       [[-1.19106449e-01],
        [ 1.56509072e-01],
        [-5.68142813e-03],
        [ 4.22265351e-01],
        [-3.30008417e-01],
        [ 3.32975626e-01],
        [ 1.11587191e+00],
        [ 9.30153355e-02]],

       [[ 7.53825977e-02],
        [-5.71454950e-02],
        [-3.88033748e+00],
        [ 7.28603378e-02],
        [ 2.99480081e-01],
        [-1.73879218e+00],
        [-6.04450226e-01],
        [ 1.96409561e-02]],

       [[-4.27586883e-02],
        [ 1.21901846e-02],
        [-2.95909810e+00],
        [ 2.81205773e-01],
        [-1.47001192e-01],
        [-7.99248099e-01],
        [ 1.64132786e+01],
        [-9.84544978e-02]],

       [[-4.15658392e-02],
        [ 1.24168791e-01],
        [ 3.78272271e+00],
        [ 1.36794269e-01],
        [-2.29170874e-01],
        [ 4.52843755e-01],
        [ 6.55223966e-01],
        [-6.80939406e-02]],

       [[-9.13523212e-02],
        [-7.01079071e-02],
        [-5.19775569e-01],
        [-1.13589607e-01],
        [ 1.96480080e-01],
        [-1.03550935e+00],
        [-5.37806273e+00],
        [ 1.15860157e-01]],

       [[-1.13240331e-02],
        [-6.21022955e-02],
        [ 4.26741695e+00],
        [-1.92457065e-01],
        [-8.54513720e-02],
        [ 1.24085605e-01],
        [-2.15947342e+01],
        [-5.10096438e-02]],

       [[-4.13019247e-02],
        [-1.19530015e-01],
        [ 4.07880449e+00],
        [-7.19369575e-02],
        [ 2.46884543e-02],
        [ 1.49826109e-01],
        [-1.93024178e+01],
        [-1.94661066e-01]],

       [[-3.71426009e-02],
        [ 6.22865148e-02],
        [ 3.44544744e+00],
        [-8.36913139e-02],
        [-3.56922895e-02],
        [ 2.16615219e-02],
        [-1.70557537e+01],
        [-9.57026109e-02]],

       [[-3.43797840e-02],
        [-4.83016782e-02],
        [-3.37638688e+00],
        [ 3.46703947e-01],
        [-1.18750177e-01],
        [-8.00496042e-01],
        [ 1.74854374e+01],
        [-2.16502044e-02]],

       [[-1.11095726e-01],
        [-9.91952047e-02],
        [ 3.39899969e+00],
        [ 1.09906822e-01],
        [-2.56081194e-01],
        [ 4.53388929e-01],
        [ 1.62199780e-01],
        [-1.08691312e-01]]], dtype=float32)>, <tf.Variable 'dense_kan/scale_factor:0' shape=(15, 1) dtype=float32, numpy=
array([[ 0.5208254],
       [ 1.977999 ],
       [ 1.3029182],
       [ 2.4282744],
       [-1.5205433],
       [-1.759505 ],
       [-1.6266409],
       [-3.1434963],
       [ 2.2859156],
       [ 1.5013717],
       [ 2.2842505],
       [ 2.6324277],
       [ 3.1900916],
       [-2.8730407],
       [-3.1667364]], dtype=float32)>, <tf.Variable 'dense_kan/bias:0' shape=(1,) dtype=float32, numpy=array([0.04028673], dtype=float32)>, <tf.Variable 'dense_kan/spline_grid:0' shape=(15, 12) dtype=float32, numpy=
array([[-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ],
       [-2.2       , -1.8000001 , -1.4000001 , -1.        , -0.6       ,
        -0.20000005,  0.20000005,  0.5999999 ,  1.        ,  1.4000001 ,
         1.8       ,  2.2       ]], dtype=float32)>]
(kan) lea@davinci:/project/phyloAI/quartetKAN/scripts> 

'''

